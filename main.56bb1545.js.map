{"version":3,"sources":["scripts/main.js"],"names":["board","score","rows","columns","field","document","querySelector","button","messageStart","messageWin","messageLose","setGame","updateBoard","setNewNumber","buttonHandler","innerText","classList","contains","remove","add","manageGame","e","prevBoard","toString","code","slideHorizontally","transpose","map","cell","i","row","getRandomNumber","Math","random","hasEmptyCell","some","found","floor","gameCell","cells","updateCell","num","className","looseGame","filterZero","filter","slide","filteredRow","length","push","isNextSame","isBelowSame","side","newRow","reverse","forEach","rowIndex","cellIndex","addEventListener"],"mappings":";AAAA,aAmMC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAjMD,IAAIA,EACAC,EAAQ,EACNC,EAAO,EACPC,EAAU,EACVC,EAAQC,SAASC,cAAc,SAC/BC,EAASF,SAASC,cAAc,UAChCE,EAAeH,SAASC,cAAc,kBACtCG,EAAaJ,SAASC,cAAc,gBACpCI,EAAcL,SAASC,cAAc,iBAE3C,SAASK,IACPX,EAAQ,CACN,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZY,IACAC,IACAA,IAKF,SAASC,IACPb,EAAQ,EACRI,SAASC,cAAc,eAAeS,UAAYd,EAE9CM,EAAOS,UAAUC,SAAS,UAC5BV,EAAOS,UAAUE,OAAO,SACxBX,EAAOS,UAAUG,IAAI,WACrBZ,EAAOQ,UAAY,UACnBP,EAAaQ,UAAUG,IAAI,UAC3BR,MAEAF,EAAWO,UAAUG,IAAI,UACzBT,EAAYM,UAAUG,IAAI,UAC1BR,KAMJ,SAASS,EAAWC,GACZC,IAAAA,EAAY,EAAItB,GAAOuB,WAEd,cAAXF,EAAEG,MAAmC,eAAXH,EAAEG,MAC9BC,EAAkBJ,EAAEG,MAGP,YAAXH,EAAEG,MAAiC,cAAXH,EAAEG,OAC5BE,IACAD,EAAkBJ,EAAEG,MACpBE,KAGFd,IAIIU,IAFiB,EAAItB,GAAOuB,YAG9BV,IAGFR,SAASC,cAAc,eAAeS,UAAYd,EAGpD,SAASyB,IACP1B,EAAQA,EAAM,GAAG2B,IAAI,SAACC,EAAMC,GAAM7B,OAAAA,EAAM2B,IAAI,SAAAG,GAAOA,OAAAA,EAAID,OAGzD,SAASE,IACAC,OAAAA,KAAKC,UAAY,GAAM,EAAI,EAGpC,SAASC,IACAlC,OAAAA,EAAMmC,KAAK,SAAAL,GAAOA,OAAAA,EAAIK,KAAK,SAAAP,GAAQ,OAACA,MAG7C,SAASf,IACH,GAACqB,IAME,IAFHE,IAAAA,GAAQ,GAEJA,GAAO,CACPN,IAAAA,EAAME,KAAKK,MAAML,KAAKC,SAAW/B,GACjC0B,EAAOI,KAAKK,MAAML,KAAKC,SAAW9B,GAEpCH,GAAqB,IAArBA,EAAM8B,GAAKF,GAAa,CACpBU,IAAAA,EAAWlC,EAAMF,KAAK4B,GAAKS,MAAMX,GAEvC5B,EAAM8B,GAAKF,GAAQG,IACnBO,EAASvB,UAAYf,EAAM8B,GAAKF,GAChCU,EAAStB,UAAUG,IAAmBnB,eAAAA,OAAAA,EAAM8B,GAAKF,KAEjDQ,GAAQ,IAKd,SAASI,EAAWZ,EAAMa,GACxBb,EAAKb,UAAY,GACjBa,EAAKc,UAAY,aAEbD,EAAM,IACRb,EAAKb,UAAY0B,EAAIlB,WACrBK,EAAKZ,UAAUG,IAAmBsB,eAAAA,OAAAA,IAEtB,OAARA,GACFhC,EAAWO,UAAUE,OAAO,WAIhCyB,IAGF,SAASC,EAAWd,GACXA,OAAAA,EAAIe,OAAO,SAAAJ,GAAOA,OAAQ,IAARA,IAG3B,SAASK,EAAMhB,GAGR,IAFDiB,IAAAA,EAAcH,EAAWd,GAEpBD,EAAI,EAAGA,EAAIkB,EAAYC,OAAS,EAAGnB,IACtCkB,EAAYlB,KAAOkB,EAAYlB,EAAI,KACrCkB,EAAYlB,IAAM,EAClBkB,EAAYlB,EAAI,GAAK,EACrB5B,GAAS8C,EAAYlB,IAMlBkB,IAFPA,EAAcH,EAAWG,GAElBA,EAAYC,OAAS7C,GAC1B4C,EAAYE,KAAK,GAGZF,OAAAA,EAGT,SAASJ,IACHT,IAAAA,IAAAA,CAIC,IAAA,IAAIJ,EAAM,EAAGA,EAAM5B,EAAM4B,IACvB,IAAA,IAAIF,EAAO,EAAGA,EAAOzB,EAAU,EAAGyB,IAAQ,CACvCsB,IAAAA,EAAalD,EAAM8B,GAAKF,KAAU5B,EAAM8B,GAAKF,EAAO,GACpDuB,EAAcnD,EAAM4B,GAAME,KAAS9B,EAAM4B,EAAO,GAAGE,GAErDoB,GAAAA,GAAcC,EAChB,OAKNzC,EAAYM,UAAUE,OAAO,WAG/B,SAASO,EAAkB2B,GACpB,IAAA,IAAItB,EAAM,EAAGA,EAAM5B,EAAM4B,IAAO,CAC/BuB,IAAAA,EAASrD,EAAM8B,GAEN,cAATsB,GAAiC,YAATA,IAC1BC,EAASP,EAAMO,IAGJ,eAATD,GAAkC,cAATA,IAC3BC,EAAOC,WACPD,EAASP,EAAMO,IACRC,WAGTtD,EAAM8B,GAAOuB,EAER,IAAA,IAAIzB,EAAO,EAAGA,EAAOzB,EAASyB,IAAQ,CAIzCY,EAHiBpC,EAAMF,KAAK4B,GAAKS,MAAMX,GAC3B5B,EAAM8B,GAAKF,MAO7B,SAAShB,IACPZ,EAAMuD,QAAQ,SAACzB,EAAK0B,GAClB1B,EAAIyB,QAAQ,SAAC3B,EAAM6B,GACjBjB,EAAWpC,EAAMF,KAAKsD,GAAUjB,MAAMkB,GAAY7B,OAvKxDrB,EAAOmD,iBAAiB,QAAS5C,GAmBjCT,SAASqD,iBAAiB,QAAStC","file":"main.56bb1545.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nconst field = document.querySelector('tbody');\nconst button = document.querySelector('button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  updateBoard();\n  setNewNumber();\n  setNewNumber();\n}\n\nbutton.addEventListener('click', buttonHandler);\n\nfunction buttonHandler() {\n  score = 0;\n  document.querySelector('.game-score').innerText = score;\n\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n    setGame();\n  } else {\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    setGame();\n  }\n};\n\ndocument.addEventListener('keyup', manageGame);\n\nfunction manageGame(e) {\n  const prevBoard = [...board].toString();\n\n  if (e.code === 'ArrowLeft' || e.code === 'ArrowRight') {\n    slideHorizontally(e.code);\n  }\n\n  if (e.code === 'ArrowUp' || e.code === 'ArrowDown') {\n    transpose();\n    slideHorizontally(e.code);\n    transpose();\n  }\n\n  updateBoard();\n\n  const currentBoard = [...board].toString();\n\n  if (prevBoard !== currentBoard) {\n    setNewNumber();\n  }\n\n  document.querySelector('.game-score').innerText = score;\n};\n\nfunction transpose() {\n  board = board[0].map((cell, i) => board.map(row => row[i]));\n}\n\nfunction getRandomNumber() {\n  return Math.random() >= 0.9 ? 4 : 2;\n}\n\nfunction hasEmptyCell() {\n  return board.some(row => row.some(cell => !cell));\n}\n\nfunction setNewNumber() {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const row = Math.floor(Math.random() * rows);\n    const cell = Math.floor(Math.random() * columns);\n\n    if (board[row][cell] === 0) {\n      const gameCell = field.rows[row].cells[cell];\n\n      board[row][cell] = getRandomNumber();\n      gameCell.innerText = board[row][cell];\n      gameCell.classList.add(`field-cell--${board[row][cell]}`);\n\n      found = true;\n    }\n  }\n}\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.className = 'field-cell';\n\n  if (num > 0) {\n    cell.innerText = num.toString();\n    cell.classList.add(`field-cell--${num}`);\n\n    if (num === 2048) {\n      messageWin.classList.remove('hidden');\n    }\n  }\n\n  looseGame();\n}\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  let filteredRow = filterZero(row);\n\n  for (let i = 0; i < filteredRow.length - 1; i++) {\n    if (filteredRow[i] === filteredRow[i + 1]) {\n      filteredRow[i] *= 2;\n      filteredRow[i + 1] = 0;\n      score += filteredRow[i];\n    }\n  }\n\n  filteredRow = filterZero(filteredRow);\n\n  while (filteredRow.length < columns) {\n    filteredRow.push(0);\n  }\n\n  return filteredRow;\n}\n\nfunction looseGame() {\n  if (hasEmptyCell()) {\n    return;\n  }\n\n  for (let row = 0; row < rows; row++) {\n    for (let cell = 0; cell < columns - 1; cell++) {\n      const isNextSame = board[row][cell] === board[row][cell + 1];\n      const isBelowSame = board[cell][row] === board[cell + 1][row];\n\n      if (isNextSame || isBelowSame) {\n        return;\n      }\n    }\n  }\n\n  messageLose.classList.remove('hidden');\n}\n\nfunction slideHorizontally(side) {\n  for (let row = 0; row < rows; row++) {\n    let newRow = board[row];\n\n    if (side === 'ArrowLeft' || side === 'ArrowUp') {\n      newRow = slide(newRow);\n    }\n\n    if (side === 'ArrowRight' || side === 'ArrowDown') {\n      newRow.reverse();\n      newRow = slide(newRow);\n      newRow.reverse();\n    }\n\n    board[row] = newRow;\n\n    for (let cell = 0; cell < columns; cell++) {\n      const gameCell = field.rows[row].cells[cell];\n      const num = board[row][cell];\n\n      updateCell(gameCell, num);\n    }\n  }\n}\n\nfunction updateBoard() {\n  board.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      updateCell(field.rows[rowIndex].cells[cellIndex], cell);\n    });\n  });\n}\n"]}